import json
from pathlib import Path

from typing import TYPE_CHECKING, Any, Dict, List

import toml
from aiodocker import Docker
from pydantic.dataclasses import dataclass

from .exceptions import ExploitParsingError

# Hack for circular import
if TYPE_CHECKING:
    from .runtime import Runtime


@dataclass
class Exploit:
    name: str
    chal_name: str

    enabled: bool
    ignore_teams: List[str]
    timeout: int
    notifications: List[str]
    default_meta: Dict[str, Any]

    docker_image_hash: str

    @classmethod
    async def from_path(
        cls, runtime: "Runtime", path: Path, name: str, chal_name: str
    ) -> "Exploit":
        if not (path / "siren.toml").exists():
            raise ExploitParsingError(f"Unable to find 'siren.toml' at {path}")

        with open(path / "siren.toml", "r") as f:
            sirenfile = toml.load(f)

        docker_image_hash = await runtime.docker.build_image_from_path(path)

        return cls(
            name=name,
            chal_name=chal_name,
            enabled=sirenfile["enabled"],
            ignore_teams=sirenfile.get("ignore_teams", []),
            timeout=sirenfile["timeout"],
            notifications=sirenfile.get("notifications", []),
            default_meta=sirenfile.get("meta", {}),
            docker_image_hash=docker_image_hash,
        )
